DELIMITER //

CREATE TRIGGER trg_update_cgpa
AFTER UPDATE ON result_summary
FOR EACH ROW
BEGIN
    DECLARE total_points DECIMAL(10,2) DEFAULT 0.0;
    DECLARE total_credits DECIMAL(10,2) DEFAULT 0.0;
    DECLARE cgpa_val DECIMAL(4,2);

   
    SELECT SUM(
                CASE 
                    WHEN final_mark >= 85 THEN 4.0
                    WHEN final_mark >= 80 THEN 4.0
                    WHEN final_mark >= 75 THEN 3.7
                    WHEN final_mark >= 70 THEN 3.3
                    WHEN final_mark >= 65 THEN 3.0
                    WHEN final_mark >= 60 THEN 2.7
                    WHEN final_mark >= 55 THEN 2.3
                    WHEN final_mark >= 50 THEN 2.0
                    WHEN final_mark >= 45 THEN 1.7
                    ELSE 0
                END * c.credits
           ),
           SUM(c.credits)
    INTO total_points, total_credits
    FROM result_summary r
    JOIN course c ON r.course_id = c.course_id
    WHERE r.reg_num = NEW.reg_num;

    IF total_credits > 0 THEN
        SET cgpa_val = ROUND(total_points / total_credits, 2);

        UPDATE student
        SET cgpa = cgpa_val,
            updated_at = CURRENT_TIMESTAMP
        WHERE reg_num = NEW.reg_num;
    END IF;
END //

DELIMITER ;


DELIMITER //

CREATE TRIGGER trg_medical_approved
AFTER UPDATE ON medical
FOR EACH ROW
BEGIN
    IF NEW.status = 'Approved' THEN
        UPDATE result_summary r
        JOIN assessment_type a
          ON a.course_id = r.course_id
        JOIN marks m
          ON m.assessment_id = a.assessment_id
          AND m.reg_num = r.reg_num
        SET r.grade = 'MC'
        WHERE r.reg_num = NEW.reg_num
          AND m.status = 'Absent'
          AND a.assessment_category IN ('Mid Exam', 'End Exam')
          AND a.exam_date BETWEEN NEW.valid_from AND NEW.valid_to;
    END IF;
END //

DELIMITER ;


DELIMITER //

CREATE TRIGGER trg_result_pass
BEFORE UPDATE ON result_summary
FOR EACH ROW
BEGIN

    IF NEW.ca_marks < 16 THEN
        SET NEW.ca_pass = 'Fail';
    ELSE
        SET NEW.ca_pass = 'Pass';
    END IF;

    IF NEW.end_mark < 21 THEN
        SET NEW.end_pass = 'Repeat';
    ELSE
        SET NEW.end_pass = 'Pass';
    END IF;
END //

DELIMITER ;



DELIMITER $$

CREATE TRIGGER trg_update_result_summary
AFTER INSERT ON marks
FOR EACH ROW
BEGIN
    DECLARE total_quiz DECIMAL(5,2) DEFAULT 0.00;
    DECLARE total_project DECIMAL(5,2) DEFAULT 0.00;
    DECLARE total_assignment DECIMAL(5,2) DEFAULT 0.00;
    DECLARE mid_marks DECIMAL(5,2) DEFAULT 0.00;
    DECLARE end_marks DECIMAL(5,2) DEFAULT 0.00;
    DECLARE course INT;

    

    SELECT course_id INTO course FROM assessment_type WHERE assessment_id = NEW.assessment_id;

  
    SELECT SUM(marked_obtained * weightage) INTO total_quiz
    FROM (
        SELECT m.marked_obtained, at.weightage
        FROM marks m
        JOIN assessment_type at ON m.assessment_id = at.assessment_id
        WHERE m.reg_num = NEW.reg_num
          AND at.course_id = course
          AND at.assessment_category LIKE 'Quiz%'
        ORDER BY marked_obtained DESC
        LIMIT 2
    ) AS top2_quizzes;

   
    SELECT
        SUM(CASE WHEN at.assessment_category = 'Project' THEN m.marked_obtained * at.weightage ELSE 0 END),
        SUM(CASE WHEN at.assessment_category = 'Assignment' THEN m.marked_obtained * at.weightage ELSE 0 END),
        SUM(CASE WHEN at.assessment_category = 'Mid Exam' THEN m.marked_obtained * at.weightage ELSE 0 END),
        SUM(CASE WHEN at.assessment_category = 'End Exam' THEN m.marked_obtained * at.weightage ELSE 0 END)
    INTO total_project, total_assignment, mid_marks, end_marks
    FROM marks m
    JOIN assessment_type at ON m.assessment_id = at.assessment_id
    WHERE m.reg_num = NEW.reg_num
      AND at.course_id = course;

   
    IF EXISTS (SELECT 1 FROM result_summary WHERE reg_num = NEW.reg_num AND course_id = course) THEN
        UPDATE result_summary
        SET f_quiz = total_quiz,
            project = total_project,
            assignment = total_assignment,
            mid_exam_marks = mid_marks,
            end_mark = end_marks,
            updated_at = CURRENT_TIMESTAMP
        WHERE reg_num = NEW.reg_num AND course_id = course;
    ELSE
        INSERT INTO result_summary(reg_num, course_id, f_quiz, project, assignment, mid_exam_marks, end_mark)
        VALUES(NEW.reg_num, course, total_quiz, total_project, total_assignment, mid_marks, end_marks);
    END IF;

END$$

DELIMITER ;





DELIMITER $$

CREATE TRIGGER trg_update_grade_after_update
BEFORE UPDATE ON result_summary
FOR EACH ROW
BEGIN
    IF NEW.grade IS NULL OR NEW.grade <> 'MC' THEN
        IF NEW.final_mark >= 85 THEN
            SET NEW.grade = 'A+';
        ELSEIF NEW.final_mark >= 80 THEN
            SET NEW.grade = 'A';
        ELSEIF NEW.final_mark >= 75 THEN
            SET NEW.grade = 'A-';
        ELSEIF NEW.final_mark >= 70 THEN
            SET NEW.grade = 'B+';
        ELSEIF NEW.final_mark >= 65 THEN
            SET NEW.grade = 'B';
        ELSEIF NEW.final_mark >= 60 THEN
            SET NEW.grade = 'B-';
        ELSEIF NEW.final_mark >= 55 THEN
            SET NEW.grade = 'C+';
        ELSEIF NEW.final_mark >= 50 THEN
            SET NEW.grade = 'C';
        ELSEIF NEW.final_mark >= 45 THEN
            SET NEW.grade = 'C-';
        ELSE
            SET NEW.grade = 'F';
        END IF;
    END IF;
END$$

DELIMITER ;



DELIMITER $$

CREATE TRIGGER before_course_insert
BEFORE INSERT ON Course
FOR EACH ROW
BEGIN
    SET NEW.department = REGEXP_SUBSTR(NEW.course_code, '^[A-Z]+');

    SET NEW.level   = CAST(SUBSTRING(RIGHT(NEW.course_code, 4), 1, 1) AS UNSIGNED);
    SET NEW.semester = CAST(SUBSTRING(RIGHT(NEW.course_code, 4), 2, 1) AS UNSIGNED);
    SET NEW.c_unit    = CAST(SUBSTRING(RIGHT(NEW.course_code, 4), 3, 1) AS UNSIGNED);
    SET NEW.credits = CAST(SUBSTRING(RIGHT(NEW.course_code, 4), 4, 1) AS UNSIGNED);
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER after_user_insert
AFTER INSERT ON user
FOR EACH ROW
BEGIN
   
    IF NEW.user_type = 'student' THEN
        UPDATE department
        SET stu_count = stu_count + 1
        WHERE dept_id = NEW.dept_id;
    ELSEIF NEW.user_type = 'lecturer' THEN
        UPDATE department
        SET lec_count = lec_count + 1
        WHERE dept_id = NEW.dept_id;
    ELSEIF NEW.user_type = 't_officer' THEN
        UPDATE department
        SET to_count = to_count + 1
        WHERE dept_id = NEW.dept_id;
    END IF;
END$$

DELIMITER ;



DELIMITER $$

CREATE TRIGGER after_user_delete
AFTER DELETE ON user
FOR EACH ROW
BEGIN
     IF OLD.user_type = 'student' THEN
        UPDATE department
        SET stu_count = stu_count - 1
        WHERE dept_id = OLD.dept_id;
    ELSEIF OLD.user_type = 'lecturer' THEN
        UPDATE department
        SET lec_count = lec_count - 1
        WHERE dept_id = OLD.dept_id;
    ELSEIF OLD.user_type = 't_officer' THEN
        UPDATE department
        SET to_count = to_count - 1
        WHERE dept_id = OLD.dept_id;
    END IF;
END$$

DELIMITER ;


DELIMITER $$

CREATE TRIGGER after_medical_approved
AFTER UPDATE ON medical
FOR EACH ROW
BEGIN
    IF NEW.status = 'Approved' AND OLD.status != 'Approved' THEN
        UPDATE attendance_records ar
        JOIN attendance_session s
          ON ar.session_id = s.session_id
             AND s.session_date BETWEEN NEW.valid_from AND NEW.valid_to
        SET ar.status = 'Medical',
            ar.medical_id = NEW.medical_id
        WHERE ar.reg_num = NEW.reg_num
          AND ar.status = 'Absent';     END IF;
END $$

DELIMITER ;

